/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SymbolsRouteImport } from './routes/symbols'
import { Route as ScreenRouteImport } from './routes/screen'
import { Route as QrcodeRouteImport } from './routes/qrcode'
import { Route as ProjRouteImport } from './routes/proj'
import { Route as MidiParserRouteImport } from './routes/midi-parser'
import { Route as GradientWallpaperRouteImport } from './routes/gradient-wallpaper'
import { Route as DvdLogoRouteImport } from './routes/dvd-logo'
import { Route as CvRouteImport } from './routes/cv'
import { Route as BusinessCardRouteImport } from './routes/business-card'
import { Route as IndexRouteImport } from './routes/index'

const SymbolsRoute = SymbolsRouteImport.update({
  id: '/symbols',
  path: '/symbols',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/symbols.lazy').then((d) => d.Route))
const ScreenRoute = ScreenRouteImport.update({
  id: '/screen',
  path: '/screen',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/screen.lazy').then((d) => d.Route))
const QrcodeRoute = QrcodeRouteImport.update({
  id: '/qrcode',
  path: '/qrcode',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjRoute = ProjRouteImport.update({
  id: '/proj',
  path: '/proj',
  getParentRoute: () => rootRouteImport,
} as any)
const MidiParserRoute = MidiParserRouteImport.update({
  id: '/midi-parser',
  path: '/midi-parser',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/midi-parser.lazy').then((d) => d.Route))
const GradientWallpaperRoute = GradientWallpaperRouteImport.update({
  id: '/gradient-wallpaper',
  path: '/gradient-wallpaper',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/gradient-wallpaper.lazy').then((d) => d.Route),
)
const DvdLogoRoute = DvdLogoRouteImport.update({
  id: '/dvd-logo',
  path: '/dvd-logo',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/dvd-logo.lazy').then((d) => d.Route))
const CvRoute = CvRouteImport.update({
  id: '/cv',
  path: '/cv',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/cv.lazy').then((d) => d.Route))
const BusinessCardRoute = BusinessCardRouteImport.update({
  id: '/business-card',
  path: '/business-card',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/business-card.lazy').then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/business-card': typeof BusinessCardRoute
  '/cv': typeof CvRoute
  '/dvd-logo': typeof DvdLogoRoute
  '/gradient-wallpaper': typeof GradientWallpaperRoute
  '/midi-parser': typeof MidiParserRoute
  '/proj': typeof ProjRoute
  '/qrcode': typeof QrcodeRoute
  '/screen': typeof ScreenRoute
  '/symbols': typeof SymbolsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/business-card': typeof BusinessCardRoute
  '/cv': typeof CvRoute
  '/dvd-logo': typeof DvdLogoRoute
  '/gradient-wallpaper': typeof GradientWallpaperRoute
  '/midi-parser': typeof MidiParserRoute
  '/proj': typeof ProjRoute
  '/qrcode': typeof QrcodeRoute
  '/screen': typeof ScreenRoute
  '/symbols': typeof SymbolsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/business-card': typeof BusinessCardRoute
  '/cv': typeof CvRoute
  '/dvd-logo': typeof DvdLogoRoute
  '/gradient-wallpaper': typeof GradientWallpaperRoute
  '/midi-parser': typeof MidiParserRoute
  '/proj': typeof ProjRoute
  '/qrcode': typeof QrcodeRoute
  '/screen': typeof ScreenRoute
  '/symbols': typeof SymbolsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/business-card'
    | '/cv'
    | '/dvd-logo'
    | '/gradient-wallpaper'
    | '/midi-parser'
    | '/proj'
    | '/qrcode'
    | '/screen'
    | '/symbols'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/business-card'
    | '/cv'
    | '/dvd-logo'
    | '/gradient-wallpaper'
    | '/midi-parser'
    | '/proj'
    | '/qrcode'
    | '/screen'
    | '/symbols'
  id:
    | '__root__'
    | '/'
    | '/business-card'
    | '/cv'
    | '/dvd-logo'
    | '/gradient-wallpaper'
    | '/midi-parser'
    | '/proj'
    | '/qrcode'
    | '/screen'
    | '/symbols'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BusinessCardRoute: typeof BusinessCardRoute
  CvRoute: typeof CvRoute
  DvdLogoRoute: typeof DvdLogoRoute
  GradientWallpaperRoute: typeof GradientWallpaperRoute
  MidiParserRoute: typeof MidiParserRoute
  ProjRoute: typeof ProjRoute
  QrcodeRoute: typeof QrcodeRoute
  ScreenRoute: typeof ScreenRoute
  SymbolsRoute: typeof SymbolsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/symbols': {
      id: '/symbols'
      path: '/symbols'
      fullPath: '/symbols'
      preLoaderRoute: typeof SymbolsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/screen': {
      id: '/screen'
      path: '/screen'
      fullPath: '/screen'
      preLoaderRoute: typeof ScreenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/qrcode': {
      id: '/qrcode'
      path: '/qrcode'
      fullPath: '/qrcode'
      preLoaderRoute: typeof QrcodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/proj': {
      id: '/proj'
      path: '/proj'
      fullPath: '/proj'
      preLoaderRoute: typeof ProjRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/midi-parser': {
      id: '/midi-parser'
      path: '/midi-parser'
      fullPath: '/midi-parser'
      preLoaderRoute: typeof MidiParserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gradient-wallpaper': {
      id: '/gradient-wallpaper'
      path: '/gradient-wallpaper'
      fullPath: '/gradient-wallpaper'
      preLoaderRoute: typeof GradientWallpaperRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dvd-logo': {
      id: '/dvd-logo'
      path: '/dvd-logo'
      fullPath: '/dvd-logo'
      preLoaderRoute: typeof DvdLogoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cv': {
      id: '/cv'
      path: '/cv'
      fullPath: '/cv'
      preLoaderRoute: typeof CvRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/business-card': {
      id: '/business-card'
      path: '/business-card'
      fullPath: '/business-card'
      preLoaderRoute: typeof BusinessCardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BusinessCardRoute: BusinessCardRoute,
  CvRoute: CvRoute,
  DvdLogoRoute: DvdLogoRoute,
  GradientWallpaperRoute: GradientWallpaperRoute,
  MidiParserRoute: MidiParserRoute,
  ProjRoute: ProjRoute,
  QrcodeRoute: QrcodeRoute,
  ScreenRoute: ScreenRoute,
  SymbolsRoute: SymbolsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
